name: Deploy to Oracle VM

on:
  push:
    branches:
      - main
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      run: npm test

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 160.34.209.175 >> ~/.ssh/known_hosts
    - name: Deploy to Oracle VM and rebuild Docker containers
      run: |
        ssh ubuntu@160.34.209.175 << EOF
          cd pisa-job-application
          git pull origin main
          
          # Mostrar contenedores actuales para debugging
          echo "Current running containers before cleanup:"
          sudo docker ps -a
          
          # Detener todos los servicios de docker-compose si existen
          if [ -f docker-compose.yml ]; then
            echo "Stopping docker-compose services..."
            sudo docker-compose down 2>/dev/null || true
          fi
          
          # Liberar puerto 3000 si está ocupado (Next.js)
          PORT=3000
          PID=\$(sudo lsof -t -i:\$PORT)
          if [ -n "\$PID" ]; then
            echo "Killing process using port \$PORT: PID \$PID"
            sudo kill -9 \$PID
            sleep 2
          fi
          
          # Liberar puerto 8000 si está ocupado (FastAPI)
          PORT=8000
          PID=\$(sudo lsof -t -i:\$PORT)
          if [ -n "\$PID" ]; then
            echo "Killing process using port \$PORT: PID \$PID"
            sudo kill -9 \$PID
            sleep 2
          fi
          
          # Eliminar TODOS los contenedores que usen los puertos 8000 y 3000
          echo "Finding and removing containers using ports 8000 and 3000..."
          
          # Encontrar y eliminar contenedores usando puerto 8000
          PORT_8000_CONTAINERS=\$(sudo docker ps -q --filter "publish=8000")
          if [ -n "\$PORT_8000_CONTAINERS" ]; then
            echo "Removing containers using port 8000: \$PORT_8000_CONTAINERS"
            sudo docker rm -f \$PORT_8000_CONTAINERS
          fi
          
          # Encontrar y eliminar contenedores usando puerto 3000
          PORT_3000_CONTAINERS=\$(sudo docker ps -q --filter "publish=3000")
          if [ -n "\$PORT_3000_CONTAINERS" ]; then
            echo "Removing containers using port 3000: \$PORT_3000_CONTAINERS"
            sudo docker rm -f \$PORT_3000_CONTAINERS
          fi
          
          # Eliminar contenedores por nombre también (incluyendo my-fastapi-app)
          echo "Removing containers by name..."
          sudo docker rm -f pisa-app pisa-app-v2 fastapi-service fastapi-service-v2 my-fastapi-app 2>/dev/null || true
          
          # Eliminar imágenes existentes para forzar rebuild completo
          echo "Removing existing Docker images..."
          sudo docker rmi pisa-fastapi-app pisa-fastapi-app-v2 pisa-job-app pisa-job-app-v2 2>/dev/null || true
          
          # Limpiar caché de Docker para asegurar build desde cero
          echo "Cleaning Docker cache..."
          sudo docker builder prune -f 2>/dev/null || true
          
          # Construir y ejecutar FastAPI (sin caché) - NUEVO NOMBRE
          echo "Building FastAPI container from scratch..."
          sudo docker build --no-cache -t pisa-fastapi-app-v2 -f Dockerfile.fastapi .
          sudo docker run -d \
            --name fastapi-service-v2 \
            -p 8000:8000 \
            pisa-fastapi-app-v2
          
          # Verificar que el contenedor FastAPI esté corriendo
          echo "FastAPI container status:"
          sudo docker ps | grep fastapi-service-v2 || echo "FastAPI container not found!"
          
          # Esperar un momento y verificar logs
          sleep 5
          echo "FastAPI container logs:"
          sudo docker logs fastapi-service-v2 | tail -10
          
          # Verificar la versión del API
          echo "Testing FastAPI version:"
          curl -s http://localhost:8000/docs | grep -o 'version.*[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "Could not get version"
          
          # Construir y ejecutar Next.js (sin caché) - NUEVO NOMBRE
          echo "Building Next.js container from scratch..."
          sudo docker build --no-cache -t pisa-job-app-v2 .
          sudo docker run -d \
            --name pisa-app-v2 \
            --env-file .env \
            -p 3000:3000 \
            pisa-job-app-v2
          
          # Mostrar estado final
          echo "Final container status:"
          sudo docker ps
        EOF
